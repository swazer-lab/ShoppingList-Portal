@using Microsoft.Owin.Security
@model Swazer.ShoppingList.WebApp.Models.ExternalLoginConfirmationViewModel

@{
    ViewBag.Title = AccountStrings.Register;
}

<div class="container">
    <div class="row">
        <div class="col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 col-xs-12 ">
            <div id="register-form" class=" register-form-container background-img-heart-beat">
                <div class="text-center">
                    <img class="logo-img" src="~/Content/home/images/logo.png" alt="logo" />
                </div>
                @using (Html.BeginForm("ExternalLoginConfirmation", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <p class="text-info text-left">
                        @AccountStrings.SuccessfullyAuthenticatedMessage1 <strong>@ViewBag.LoginProvider</strong>. <br />
                        @AccountStrings.SuccessfullyAuthenticatedMessage2
                    </p>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Email)
                                @if (!string.IsNullOrEmpty(Model.Email))
                                {
                                    <input type="text" readonly value="@Model.Email" class="form-control" />
                                    @Html.HiddenFor(x => x.Email)
                                }
                                else
                                {
                                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Mobile)
                                @Html.TextBoxFor(m => m.Mobile, "", new Dictionary<string, object> { { "class", "form-control" }, { "maxlength", "10" }, { "autocomplete", "off" }, { "data-bind", "textInput:Mobile" } })
                                @Html.ValidationMessageFor(m => m.Mobile, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ArabicName)
                                @Html.TextBoxFor(m => m.ArabicName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.ArabicName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.EnglishName)
                                @Html.TextBoxFor(m => m.EnglishName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.EnglishName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Gender)
                                @Html.EnumDropDownListFor(m => m.Gender, SharedStrings.SelectPlaceholder, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        <input type="submit" class="btn btn-md btn-default bg-secondary-color register-btn" value="@AccountStrings.Register" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/knockout")

    <script type="text/javascript">

        function ExternalLoginVM() {
            var self = this;

            self.Mobile = ko.observable();

            self.MobileSubscription = self.Mobile.subscribe(function (newVal) {
                forceJustMobile(self.Mobile);
            });
        };

        var vm = new ExternalLoginVM();
        ko.applyBindings(vm);

    </script>
}
